// В font-size можно записать самый частый размер шрифта на сайте, в font-family - самый частое семейство шрифта.

body {
  font-family: var(--mont-600);
  color: var(--main-color);
  font-size: rem(14);
  line-height: 1.4;
  // color: $mainColor;
  // overflow-wrap: break-word;
  // word-wrap: break-word;
}

.wrapper {
  overflow: hidden;
  // overflow-x: hidden;
  // overflow-y: auto;
  display: flex;
  flex-direction: column;
  min-height: 100%;
}

/*------------------*/

// Функция возвращает размер шрифта в rem (переводит из пикселей в rem). По умолчанию в браузерах это 16px. В стилях для конкретного текста можно писать font-size: rem(32); Это пример. Тогда в файле css окажется 2rem. 16px - это размер по умолчанию в браузерах. $size пишем без 'px'.

[class$="__container"],
[class$="-container"] {
  max-width: $maxWidth;
  min-width: $minWidth;
  padding: 0 rem(15);
  margin: 0 auto;
}

.main {
  flex-grow: 1;
}

body._lock {
  overflow: hidden;
}

.button {
  display: flex;
  justify-content: center;
  align-items: center;
  width: fit-content;
  // color: var(--green);
  font-size: rem(12);
  line-height: 1;
  min-height: rem(55);
  padding: rem(15) rem(26);
  border-radius: rem(100);
  border: 1px solid var(--blue-color);
  text-align: center;
  user-select: none;
  transition:
    color 0.3s ease,
    background-color 0.3s ease;
  @media (any-hover: hover) and (pointer: fine) {
    &:hover {
      color: var(--white-color);
      background: var(--blue-color);
    }
  }
  // .button_large

  &_large {
    // min-height: rem(80);
    min-height: proadrem(60, 80, $minWidthRemWithout, $maxWidthRemWithout);
    font-size: rem(13);
    font-weight: 600;
    padding: rem(20) rem(43);
    line-height: 1.5;
    letter-spacing: rem(1.95);
    text-transform: uppercase;
    @media (max-width: $mobileSmall) {
      padding: rem(15) rem(30);
    }
  }

  // .button_small

  &_small {
  }

  // .button_blue

  &_blue {
    border: 1px solid var(--blue-color);
    background: var(--blue-color);
    color: #fff;
    box-shadow: 0 rem(4) rem(10) rem(0) rgba(255, 255, 255, 0.3) inset;
    @media (any-hover: hover) and (pointer: fine) {
      &:hover {
        background: transparent;
        color: var(--main-color);
      }
    }
  }

  // .button_yellow

  &_yellow {
    border: 1px solid var(--orange-color);
    background: var(--orange-color);
    color: #fff;
    box-shadow: 0 rem(4) rem(10) rem(0) rgba(255, 255, 255, 0.3) inset;
    @media (any-hover: hover) and (pointer: fine) {
      &:hover {
        background: transparent;
        color: var(--main-color);
      }
    }
  }
}

/*--------- visually-hidden ---------*/

// Класс, который можно использовать для элементов, которые  нужно скрыть, но так, чтобы скринридеры их видели. Например, заголовок, который должен по логике быть, но по дизайн-макету его нет. По скрытым таким способам ссылкам и кнопкам будет при табе происходить фокусировка, что будет не видно.
// При display: none; ни поисковики, ни скринридеды не видят скрытый элемент. Атрибут hidden может заменить display: none;
// Если нужно сделать плавное появление и исчезновение выпадающего меню, можно использовать visibility и opacity (hidden и 0). Но при этом нужно, чтобы элемент был спозиционирован абсолютно. Иначе он будет продолжать занимать место в разметке. Поисковики будут видеть элемент, скринридеры - нет.
//Вариант: opacity: 0; pointer-events: none; (и поисковики, и скринридеры видят элемент, элемент занимает место в разметке, как и в варианте выше). Делает то же самое.
// Исчезновение блока можно сделать с помощью спойлера (за счет height: 0;). В этом случае исчезновение/появление анимируется. И скрытый элемент будут видеть и поисковики, и скринридеры. Но в случае с height: auto; height не анимируется. Нужно, чтобы оба значения height были числами. Плюс нужно убирать паддинги и бордеры (при height: 0 они остаются видны).

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;
  white-space: nowrap;
  clip-path: inset(100%);
  clip: rect(0, 0, 0, 0);
  overflow: hidden;
}

/*------------------*/

// Класс none - чтобы временно скрывать блоки во время разработки

.none {
  display: none !important;
}

.logo {
  display: flex;
  gap: rem(10);
  align-items: flex-end;
  @media (any-hover: hover) and (pointer: fine) {
    &:hover {
      .logo__img {
        transform: scale(1.05);
        opacity: 0.8;
      }
    }
  }

  // .logo__img-wrapper
  &__img-wrapper {
    width: rem(48);
    height: 100%;
    position: relative;
  }

  // .logo__img

  &__img {
    width: 100%;
    position: absolute;
    left: 0;
    bottom: 0;
    transition:
      transform 0.3s ease,
      opacity 0.3s ease;
  }

  // .logo__text

  &__text {
    margin-bottom: rem(3);
    max-width: rem(100);
  }

  // .logo__title

  &__title {
    color: var(--blue-color);
  }

  // .logo__subtitle

  &__subtitle {
    color: var(--gray-color);
    font-size: rem(10);
  }
}

.heading {
  font-size: rem(30);
  line-height: 1.5;
  font-size: proadrem(25, 30, $minWidthRemWithout, $maxWidthRemWithout);
  ._bold {
    font-family: var(--mont-800);
  }
  ._small {
    // font-size: rem(18);
    font-size: proadrem(16, 18, $minWidthRemWithout, $maxWidthRemWithout);
  }
  @media (max-width: $mobile) {
    line-height: 1.3;
  }
}
